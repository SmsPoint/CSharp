/* 
 * sms-client
 *
 * API for sms-send functions
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Nvt.Celman.Client.OpenAPIDateConverter;

namespace Com.Nvt.Celman.Model
{
    /// <summary>
    /// The structure to describe a request to send a text message.
    /// </summary>
    [DataContract]
    public partial class SmsSendRequest :  IEquatable<SmsSendRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SmsSendRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SmsSendRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SmsSendRequest" /> class.
        /// </summary>
        /// <param name="senderName">senderName (required).</param>
        /// <param name="body">body (required).</param>
        /// <param name="phone">phone (required).</param>
        /// <param name="source">source (required).</param>
        public SmsSendRequest(string senderName = default(string), string body = default(string), string phone = default(string), string source = default(string))
        {
            // to ensure "senderName" is required (not null)
            if (senderName == null)
            {
                throw new InvalidDataException("senderName is a required property for SmsSendRequest and cannot be null");
            }
            else
            {
                this.SenderName = senderName;
            }
            
            // to ensure "body" is required (not null)
            if (body == null)
            {
                throw new InvalidDataException("body is a required property for SmsSendRequest and cannot be null");
            }
            else
            {
                this.Body = body;
            }
            
            // to ensure "phone" is required (not null)
            if (phone == null)
            {
                throw new InvalidDataException("phone is a required property for SmsSendRequest and cannot be null");
            }
            else
            {
                this.Phone = phone;
            }
            
            // to ensure "source" is required (not null)
            if (source == null)
            {
                throw new InvalidDataException("source is a required property for SmsSendRequest and cannot be null");
            }
            else
            {
                this.Source = source;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets SenderName
        /// </summary>
        [DataMember(Name="senderName", EmitDefaultValue=true)]
        public string SenderName { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name="body", EmitDefaultValue=true)]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="phone", EmitDefaultValue=true)]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=true)]
        public string Source { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsSendRequest {\n");
            sb.Append("  SenderName: ").Append(SenderName).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SmsSendRequest);
        }

        /// <summary>
        /// Returns true if SmsSendRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsSendRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsSendRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SenderName == input.SenderName ||
                    (this.SenderName != null &&
                    this.SenderName.Equals(input.SenderName))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SenderName != null)
                    hashCode = hashCode * 59 + this.SenderName.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
